name: Lint and Test

on: [push]

jobs:
  lint-and-unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    env:
      PYTHONPATH: ${{ github.workspace }}/src
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff scapy
    - name: Extract PCAP fixtures
      run: |
        python tests/tools/pcap_parser.py tests/fixtures/pcap/rocrail_start.pcapng
        python tests/tools/pcap_parser.py tests/fixtures/pcap/rocrail_fahren.pcapng
        python tests/tools/pcap_parser.py tests/fixtures/pcap/rocrail_schalten.pcapng
        python tests/tools/pcap_parser.py tests/fixtures/pcap/rocrail_edit.pcapng
    - name: Analysing the code with ruff
      run: |
        ruff check $(git ls-files '*.py')
    - name: Run trigger pattern tests
      run: |
        python test_trigger_improved.py
    - name: Run trigger execution tests
      run: |
        python test_trigger_execution.py
    - name: Run trigger callback tests
      run: |
        python test_trigger_callbacks.py
    - name: Run MockCommunicator tests
      run: |
        python test_mock_communicator.py
    - name: Run PCAP state update tests
      run: |
        python test_pcap_state_updates.py

  docker-integration-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image with cache
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        push: false
        load: true
        tags: docker-rocrail:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Start Rocrail container
      run: |
        cd docker
        docker compose up -d

    - name: Wait for Rocrail to be ready
      run: |
        echo "Waiting for Rocrail to start..."
        sleep 5
        docker logs pyrocrail-test-server

    - name: Verify PyRocrail can connect
      run: |
        docker exec pyrocrail-test-server python3 -c "from pyrocrail.pyrocrail import PyRocrail; import time; pr = PyRocrail('localhost', 8051); pr.start(); time.sleep(2); print(f'Locomotives: {list(pr.model._lc_domain.keys())}'); pr.stop()"

    - name: Run automode integration test
      run: |
        docker exec pyrocrail-test-server sh -c "cd /tests && python3 test_automode_multi.py"

    - name: Run feedback sensor test
      run: |
        docker exec pyrocrail-test-server sh -c "cd /tests && python3 test_feedback_sensors.py"

    - name: Run block close test
      run: |
        docker exec pyrocrail-test-server sh -c "cd /tests && python3 test_block_close.py"

    - name: Show container logs on failure
      if: failure()
      run: |
        docker logs pyrocrail-test-server

    - name: Stop and remove containers
      if: always()
      run: |
        cd docker
        docker compose down
